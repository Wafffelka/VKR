// 1. Main Application Entry Point
@SpringBootApplication
public class ClothingRecommendationApplication {
    public static void main(String[] args) {
        SpringApplication.run(ClothingRecommendationApplication.class, args);
    }
}

// 2. Controller
@RestController
@RequestMapping("/api/v1/recommendations")
public class RecommendationController {
    private final RecommendationService recommendationService;

    @Autowired
    public RecommendationController(RecommendationService recommendationService) {
        this.recommendationService = recommendationService;
    }

    @PostMapping
    public ResponseEntity<RecommendationResponse> getRecommendations(@RequestBody UserRequest userRequest) {
        RecommendationResponse response = recommendationService.getRecommendations(userRequest);
        return ResponseEntity.ok(response);
    }
}

// 3. Service
@Service
public class RecommendationService {
    private final WeatherService weatherService;
    private final UserRepository userRepository;
    private final RecommendationEngineClient recommendationEngineClient;

    @Autowired
    public RecommendationService(WeatherService weatherService, UserRepository userRepository, RecommendationEngineClient recommendationEngineClient) {
        this.weatherService = weatherService;
        this.userRepository = userRepository;
        this.recommendationEngineClient = recommendationEngineClient;
    }

    public RecommendationResponse getRecommendations(UserRequest userRequest) {
        // Save user preferences
        userRepository.save(new UserPreferences(userRequest));

        // Fetch weather data
        WeatherData weatherData = weatherService.getWeatherData(userRequest.getLocation());

        // Fetch recommendations
        return recommendationEngineClient.getRecommendations(weatherData, userRequest);
    }
}

// 4. Weather Service
@Service
public class WeatherService {
    private final RestTemplate restTemplate;
    private final RedisTemplate<String, WeatherData> redisTemplate;

    @Value("${weather.api.key}")
    private String apiKey;

    @Autowired
    public WeatherService(RestTemplate restTemplate, RedisTemplate<String, WeatherData> redisTemplate) {
        this.restTemplate = restTemplate;
        this.redisTemplate = redisTemplate;
    }

    public WeatherData getWeatherData(String location) {
        String cacheKey = "weather:" + location;
        WeatherData cachedData = redisTemplate.opsForValue().get(cacheKey);
        if (cachedData != null) {
            return cachedData;
        }

        String url = "https://api.openweathermap.org/data/2.5/weather?q=" + location + "&appid=" + apiKey;
        ResponseEntity<WeatherData> response = restTemplate.getForEntity(url, WeatherData.class);

        WeatherData weatherData = response.getBody();
        redisTemplate.opsForValue().set(cacheKey, weatherData, Duration.ofHours(1));
        return weatherData;
    }
}

// 5. Recommendation Engine Client
@Component
public class RecommendationEngineClient {
    private final RestTemplate restTemplate;

    @Value("${recommendation.engine.url}")
    private String engineUrl;

    @Autowired
    public RecommendationEngineClient(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public RecommendationResponse getRecommendations(WeatherData weatherData, UserRequest userRequest) {
        RecommendationRequest request = new RecommendationRequest(weatherData, userRequest);
        ResponseEntity<RecommendationResponse> response = restTemplate.postForEntity(engineUrl, request, RecommendationResponse.class);
        return response.getBody();
    }
}

// 6. User Repository
@Repository
public interface UserRepository extends JpaRepository<UserPreferences, Long> {
}

// 7. Models
@Data
@Entity
public class UserPreferences {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String location;
    private String activity;
    private String clothingStyle;

    public UserPreferences(UserRequest request) {
        this.location = request.getLocation();
        this.activity = request.getActivity();
        this.clothingStyle = request.getClothingStyle();
    }
}

@Data
public class UserRequest {
    private String location;
    private String activity;
    private String clothingStyle;
}

@Data
public class WeatherData {
    private String main;
    private String description;
    private double temperature;
}

@Data
public class RecommendationResponse {
    private List<String> recommendedClothing;
}

@Data
public class RecommendationRequest {
    private WeatherData weatherData;
    private UserRequest userRequest;

    public RecommendationRequest(WeatherData weatherData, UserRequest userRequest) {
        this.weatherData = weatherData;
        this.userRequest = userRequest;
    }
}

// 8. Configuration (Redis and RestTemplate)
@Configuration
public class AppConfig {

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }

    @Bean
    public RedisTemplate<String, WeatherData> redisTemplate(RedisConnectionFactory connectionFactory) {
        RedisTemplate<String, WeatherData> template = new RedisTemplate<>();
        template.setConnectionFactory(connectionFactory);
        return template;
    }
}